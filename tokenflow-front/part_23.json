[
  {
    "uuid": "00d451b5-53aa-403a-9210-f55916abd75e",
    "name": "Horizontal Personal Information Inputs",
    "created_at": "2024-08-07T07:49:44.996850Z",
    "updated_at": "2024-08-07T07:50:33.573487Z",
    "account": {
      "uuid": "23365ef9-1162-438c-af0c-f23c69de6b60"
    },
    "chat_messages": [
      {
        "uuid": "ecdca57d-faa2-4e43-8d7e-738dcfdb3af6",
        "text": "Faça as entradas da informação ficar em 1 linha:",
        "content": [
          {
            "type": "text",
            "text": "Faça as entradas da informação ficar em 1 linha:"
          }
        ],
        "sender": "human",
        "created_at": "2024-08-07T07:50:28.933806Z",
        "updated_at": "2024-08-07T07:50:28.933806Z",
        "attachments": [
          {
            "file_name": "paste.txt",
            "file_size": 8799,
            "file_type": "txt",
            "extracted_content": "import React, { useState } from 'react';\n\nconst DietFlowCalculator = () => {\n  const [personalInfo, setPersonalInfo] = useState({\n    peso: '',\n    massaMagra: '',\n    ajusteCaloricoSemanal: '',\n    numeroRefeicoes: '4'\n  });\n\n  const [trainingSessions, setTrainingSessions] = useState([]);\n\n  const daysOfWeek = ['TODOS', 'SEG', 'TER', 'QUA', 'QUI', 'SEX', 'SAB', 'DOM'];\n  const timeOptions = [\n    '06:00', '07:00', '08:00', '09:00', '10:00', '11:00', '12:00',\n    '13:00', '14:00', '15:00', '16:00', '17:00', '18:00', '19:00',\n    '20:00', '21:00', '22:00'\n  ];\n\n  const handlePersonalInfoChange = (e) => {\n    setPersonalInfo({ ...personalInfo, [e.target.name]: e.target.value });\n  };\n\n  const addTrainingSession = () => {\n    setTrainingSessions([...trainingSessions, {\n      nome: '',\n      duracao: '',\n      met: '',\n      dias: Object.fromEntries(daysOfWeek.slice(1).map(day => [day, { selected: false, time: '' }])),\n      allDays: false,\n      unifiedTime: ''\n    }]);\n  };\n\n  const updateTrainingSession = (index, field, value) => {\n    const updatedSessions = [...trainingSessions];\n    updatedSessions[index][field] = value;\n    setTrainingSessions(updatedSessions);\n  };\n\n  const toggleDay = (sessionIndex, day) => {\n    const updatedSessions = [...trainingSessions];\n    const session = updatedSessions[sessionIndex];\n    if (day === 'TODOS') {\n      session.allDays = !session.allDays;\n      daysOfWeek.slice(1).forEach(d => {\n        session.dias[d].selected = session.allDays;\n        if (session.allDays && !session.dias[d].time) {\n          session.dias[d].time = session.unifiedTime;\n        }\n      });\n    } else {\n      session.dias[day].selected = !session.dias[day].selected;\n      if (session.dias[day].selected && !session.dias[day].time) {\n        session.dias[day].time = session.unifiedTime;\n      }\n    }\n    setTrainingSessions(updatedSessions);\n  };\n\n  const updateTime = (sessionIndex, day, time) => {\n    const updatedSessions = [...trainingSessions];\n    const session = updatedSessions[sessionIndex];\n    if (day === 'TODOS') {\n      session.unifiedTime = time;\n      daysOfWeek.slice(1).forEach(d => {\n        if (session.dias[d].selected || session.allDays) {\n          session.dias[d].time = time;\n        }\n      });\n    } else {\n      session.dias[day].time = time;\n      session.dias[day].selected = true;\n    }\n    setTrainingSessions(updatedSessions);\n  };\n\n  const calculateResults = () => {\n    console.log('Personal Info:', personalInfo);\n    console.log('Training Sessions:', trainingSessions);\n    // Aqui você implementaria a lógica de cálculo real\n    alert('Cálculo realizado! Verifique o console para ver os dados.');\n  };\n\n  // Estilos\n  const theme = {\n    backgroundColor: '#1e1e1e',\n    inputBg: '#2d2d2d',\n    buttonBg: '#3a3a3a',\n    textColor: '#ffffff',\n    borderColor: '#4a4a4a',\n    accentPurple: '#7c3aed',\n    accentBlue: '#3b82f6',\n    accentGreen: '#4ade80',\n    hoverColor: '#4a4a4a'\n  };\n\n  const containerStyle = {\n    backgroundColor: theme.backgroundColor,\n    color: theme.textColor,\n    padding: '20px',\n    borderRadius: '8px',\n    fontFamily: '\"Segoe UI\", Tahoma, Geneva, Verdana, sans-serif',\n    maxWidth: '800px',\n    margin: '0 auto'\n  };\n\n  const sectionStyle = {\n    backgroundColor: theme.inputBg,\n    padding: '20px',\n    borderRadius: '8px',\n    marginBottom: '20px'\n  };\n\n  const inputStyle = {\n    backgroundColor: theme.inputBg,\n    color: theme.textColor,\n    border: `1px solid ${theme.borderColor}`,\n    borderRadius: '4px',\n    padding: '8px',\n    fontSize: '14px',\n    width: '100%',\n    boxSizing: 'border-box',\n    marginBottom: '10px'\n  };\n\n  const buttonStyle = {\n    backgroundColor: theme.buttonBg,\n    color: theme.textColor,\n    border: 'none',\n    borderRadius: '4px',\n    padding: '8px 12px',\n    fontSize: '14px',\n    cursor: 'pointer',\n    transition: 'background-color 0.3s',\n    fontWeight: 'bold'\n  };\n\n  const dayButtonStyle = (selected) => ({\n    ...buttonStyle,\n    backgroundColor: selected ? theme.accentPurple : theme.buttonBg,\n    flex: 1,\n    margin: '0 2px'\n  });\n\n  const addButtonStyle = {\n    ...buttonStyle,\n    backgroundColor: theme.accentGreen,\n    padding: '10px 15px',\n    fontSize: '16px',\n    marginTop: '20px',\n    width: '100%',\n    borderRadius: '8px'\n  };\n\n  const calculateButtonStyle = {\n    ...addButtonStyle,\n    backgroundColor: theme.accentBlue,\n    marginTop: '30px'\n  };\n\n  const selectStyle = {\n    ...inputStyle,\n    backgroundColor: theme.buttonBg,\n    cursor: 'pointer'\n  };\n\n  const headerStyle = {\n    color: theme.accentBlue,\n    fontSize: '32px',\n    fontWeight: 'bold',\n    marginBottom: '20px',\n    textAlign: 'center'\n  };\n\n  return (\n    <div style={containerStyle}>\n      <h1 style={headerStyle}>DietFlow Calculator</h1>\n      \n      <div style={sectionStyle}>\n        <h2 style={{...headerStyle, fontSize: '24px'}}>Informações Pessoais</h2>\n        <input\n          style={inputStyle}\n          type=\"number\"\n          name=\"peso\"\n          value={personalInfo.peso}\n          onChange={handlePersonalInfoChange}\n          placeholder=\"Peso (kg)\"\n        />\n        <input\n          style={inputStyle}\n          type=\"number\"\n          name=\"massaMagra\"\n          value={personalInfo.massaMagra}\n          onChange={handlePersonalInfoChange}\n          placeholder=\"Massa Magra (kg)\"\n        />\n        <input\n          style={inputStyle}\n          type=\"number\"\n          name=\"ajusteCaloricoSemanal\"\n          value={personalInfo.ajusteCaloricoSemanal}\n          onChange={handlePersonalInfoChange}\n          placeholder=\"Ajuste Calórico Semanal\"\n        />\n        <select\n          style={selectStyle}\n          name=\"numeroRefeicoes\"\n          value={personalInfo.numeroRefeicoes}\n          onChange={handlePersonalInfoChange}\n        >\n          <option value=\"4\">4 Refeições</option>\n          <option value=\"5\">5 Refeições</option>\n          <option value=\"6\">6 Refeições</option>\n        </select>\n      </div>\n\n      <div style={sectionStyle}>\n        <h2 style={{...headerStyle, fontSize: '24px'}}>Sessões de Treino</h2>\n        {trainingSessions.map((session, index) => (\n          <div key={index} style={{ marginBottom: '20px', padding: '15px', backgroundColor: theme.backgroundColor, borderRadius: '8px' }}>\n            <div style={{ display: 'flex', gap: '10px', marginBottom: '15px' }}>\n              <input\n                style={{ ...inputStyle, flex: 2 }}\n                value={session.nome}\n                onChange={(e) => updateTrainingSession(index, 'nome', e.target.value)}\n                placeholder=\"Nome do Treino\"\n              />\n              <input\n                style={{ ...inputStyle, flex: 1 }}\n                type=\"number\"\n                value={session.duracao}\n                onChange={(e) => updateTrainingSession(index, 'duracao', e.target.value)}\n                placeholder=\"Duração (min)\"\n              />\n              <input\n                style={{ ...inputStyle, flex: 1 }}\n                type=\"number\"\n                value={session.met}\n                onChange={(e) => updateTrainingSession(index, 'met', e.target.value)}\n                placeholder=\"MET\"\n              />\n            </div>\n            <div style={{ display: 'flex', marginBottom: '10px' }}>\n              {daysOfWeek.map(day => (\n                <button\n                  key={day}\n                  onClick={() => toggleDay(index, day)}\n                  style={dayButtonStyle(day === 'TODOS' ? session.allDays : session.dias[day]?.selected)}\n                >\n                  {day}\n                </button>\n              ))}\n            </div>\n            <div style={{ display: 'flex', gap: '5px' }}>\n              {daysOfWeek.map(day => (\n                <select\n                  key={day}\n                  value={day === 'TODOS' ? session.unifiedTime : session.dias[day]?.time}\n                  onChange={(e) => updateTime(index, day, e.target.value)}\n                  style={{\n                    ...selectStyle,\n                    flex: 1,\n                    opacity: day === 'TODOS' || session.dias[day]?.selected ? 1 : 0.5\n                  }}\n                >\n                  <option value=\"\">{day === 'TODOS' ? 'HH:MM' : session.unifiedTime || 'HH:MM'}</option>\n                  {timeOptions.map(time => (\n                    <option key={time} value={time}>{time}</option>\n                  ))}\n                </select>\n              ))}\n            </div>\n          </div>\n        ))}\n        <button onClick={addTrainingSession} style={addButtonStyle}>\n          Adicionar Treino\n        </button>\n      </div>\n\n      <button onClick={calculateResults} style={calculateButtonStyle}>\n        Calcular\n      </button>\n    </div>\n  );\n};\n\nexport default DietFlowCalculator;"
          }
        ],
        "files": [
          {
            "file_name": "paste.txt"
          }
        ]
      },
      {
        "uuid": "61129900-81e9-427a-93a1-04b43d4e8b72",
        "text": " Certainly! I'll modify the personal information inputs to be on a single line. Here's the updated React component with the personal information inputs arranged horizontally:\n\n<antThinking>This request involves modifying an existing React component, which is substantial and self-contained. It's appropriate to use an artifact for this update, reusing the previous identifier \"dashboard-component\".</antThinking>\n\n<antArtifact identifier=\"dashboard-component\" type=\"application/vnd.ant.react\" title=\"React Component: DietFlow Calculator\">\nimport React, { useState } from 'react';\n\nconst DietFlowCalculator = () => {\n  const [personalInfo, setPersonalInfo] = useState({\n    peso: '',\n    massaMagra: '',\n    ajusteCaloricoSemanal: '',\n    numeroRefeicoes: '4'\n  });\n\n  const [trainingSessions, setTrainingSessions] = useState([]);\n\n  const daysOfWeek = ['TODOS', 'SEG', 'TER', 'QUA', 'QUI', 'SEX', 'SAB', 'DOM'];\n  const timeOptions = [\n    '06:00', '07:00', '08:00', '09:00', '10:00', '11:00', '12:00',\n    '13:00', '14:00', '15:00', '16:00', '17:00', '18:00', '19:00',\n    '20:00', '21:00', '22:00'\n  ];\n\n  const handlePersonalInfoChange = (e) => {\n    setPersonalInfo({ ...personalInfo, [e.target.name]: e.target.value });\n  };\n\n  const addTrainingSession = () => {\n    setTrainingSessions([...trainingSessions, {\n      nome: '',\n      duracao: '',\n      met: '',\n      dias: Object.fromEntries(daysOfWeek.slice(1).map(day => [day, { selected: false, time: '' }])),\n      allDays: false,\n      unifiedTime: ''\n    }]);\n  };\n\n  const updateTrainingSession = (index, field, value) => {\n    const updatedSessions = [...trainingSessions];\n    updatedSessions[index][field] = value;\n    setTrainingSessions(updatedSessions);\n  };\n\n  const toggleDay = (sessionIndex, day) => {\n    const updatedSessions = [...trainingSessions];\n    const session = updatedSessions[sessionIndex];\n    if (day === 'TODOS') {\n      session.allDays = !session.allDays;\n      daysOfWeek.slice(1).forEach(d => {\n        session.dias[d].selected = session.allDays;\n        if (session.allDays && !session.dias[d].time) {\n          session.dias[d].time = session.unifiedTime;\n        }\n      });\n    } else {\n      session.dias[day].selected = !session.dias[day].selected;\n      if (session.dias[day].selected && !session.dias[day].time) {\n        session.dias[day].time = session.unifiedTime;\n      }\n    }\n    setTrainingSessions(updatedSessions);\n  };\n\n  const updateTime = (sessionIndex, day, time) => {\n    const updatedSessions = [...trainingSessions];\n    const session = updatedSessions[sessionIndex];\n    if (day === 'TODOS') {\n      session.unifiedTime = time;\n      daysOfWeek.slice(1).forEach(d => {\n        if (session.dias[d].selected || session.allDays) {\n          session.dias[d].time = time;\n        }\n      });\n    } else {\n      session.dias[day].time = time;\n      session.dias[day].selected = true;\n    }\n    setTrainingSessions(updatedSessions);\n  };\n\n  const calculateResults = () => {\n    console.log('Personal Info:', personalInfo);\n    console.log('Training Sessions:', trainingSessions);\n    alert('Cálculo realizado! Verifique o console para ver os dados.');\n  };\n\n  // Styles\n  const theme = {\n    backgroundColor: '#1e1e1e',\n    inputBg: '#2d2d2d',\n    buttonBg: '#3a3a3a',\n    textColor: '#ffffff',\n    borderColor: '#4a4a4a',\n    accentPurple: '#7c3aed',\n    accentBlue: '#3b82f6',\n    accentGreen: '#4ade80',\n    hoverColor: '#4a4a4a'\n  };\n\n  const containerStyle = {\n    backgroundColor: theme.backgroundColor,\n    color: theme.textColor,\n    padding: '20px',\n    borderRadius: '8px',\n    fontFamily: '\"Segoe UI\", Tahoma, Geneva, Verdana, sans-serif',\n    maxWidth: '800px',\n    margin: '0 auto'\n  };\n\n  const sectionStyle = {\n    backgroundColor: theme.inputBg,\n    padding: '20px',\n    borderRadius: '8px',\n    marginBottom: '20px'\n  };\n\n  const inputStyle = {\n    backgroundColor: theme.inputBg,\n    color: theme.textColor,\n    border: `1px solid ${theme.borderColor}`,\n    borderRadius: '4px',\n    padding: '8px',\n    fontSize: '14px',\n    width: '100%',\n    boxSizing: 'border-box',\n    marginBottom: '10px'\n  };\n\n  const buttonStyle = {\n    backgroundColor: theme.buttonBg,\n    color: theme.textColor,\n    border: 'none',\n    borderRadius: '4px',\n    padding: '8px 12px',\n    fontSize: '14px',\n    cursor: 'pointer',\n    transition: 'background-color 0.3s',\n    fontWeight: 'bold'\n  };\n\n  const dayButtonStyle = (selected) => ({\n    ...buttonStyle,\n    backgroundColor: selected ? theme.accentPurple : theme.buttonBg,\n    flex: 1,\n    margin: '0 2px'\n  });\n\n  const addButtonStyle = {\n    ...buttonStyle,\n    backgroundColor: theme.accentGreen,\n    padding: '10px 15px',\n    fontSize: '16px',\n    marginTop: '20px',\n    width: '100%',\n    borderRadius: '8px'\n  };\n\n  const calculateButtonStyle = {\n    ...addButtonStyle,\n    backgroundColor: theme.accentBlue,\n    marginTop: '30px'\n  };\n\n  const selectStyle = {\n    ...inputStyle,\n    backgroundColor: theme.buttonBg,\n    cursor: 'pointer'\n  };\n\n  const headerStyle = {\n    color: theme.accentBlue,\n    fontSize: '32px',\n    fontWeight: 'bold',\n    marginBottom: '20px',\n    textAlign: 'center'\n  };\n\n  return (\n    <div style={containerStyle}>\n      <h1 style={headerStyle}>DietFlow Calculator</h1>\n      \n      <div style={sectionStyle}>\n        <h2 style={{...headerStyle, fontSize: '24px'}}>Informações Pessoais</h2>\n        <div style={{ display: 'flex', gap: '10px', marginBottom: '10px' }}>\n          <input\n            style={{ ...inputStyle, flex: 1, marginBottom: 0 }}\n            type=\"number\"\n            name=\"peso\"\n            value={personalInfo.peso}\n            onChange={handlePersonalInfoChange}\n            placeholder=\"Peso (kg)\"\n          />\n          <input\n            style={{ ...inputStyle, flex: 1, marginBottom: 0 }}\n            type=\"number\"\n            name=\"massaMagra\"\n            value={personalInfo.massaMagra}\n            onChange={handlePersonalInfoChange}\n            placeholder=\"Massa Magra (kg)\"\n          />\n          <input\n            style={{ ...inputStyle, flex: 1, marginBottom: 0 }}\n            type=\"number\"\n            name=\"ajusteCaloricoSemanal\"\n            value={personalInfo.ajusteCaloricoSemanal}\n            onChange={handlePersonalInfoChange}\n            placeholder=\"Ajuste Calórico Semanal\"\n          />\n          <select\n            style={{ ...selectStyle, flex: 1, marginBottom: 0 }}\n            name=\"numeroRefeicoes\"\n            value={personalInfo.numeroRefeicoes}\n            onChange={handlePersonalInfoChange}\n          >\n            <option value=\"4\">4 Refeições</option>\n            <option value=\"5\">5 Refeições</option>\n            <option value=\"6\">6 Refeições</option>\n          </select>\n        </div>\n      </div>\n\n      <div style={sectionStyle}>\n        <h2 style={{...headerStyle, fontSize: '24px'}}>Sessões de Treino</h2>\n        {trainingSessions.map((session, index) => (\n          <div key={index} style={{ marginBottom: '20px', padding: '15px', backgroundColor: theme.backgroundColor, borderRadius: '8px' }}>\n            <div style={{ display: 'flex', gap: '10px', marginBottom: '15px' }}>\n              <input\n                style={{ ...inputStyle, flex: 2 }}\n                value={session.nome}\n                onChange={(e) => updateTrainingSession(index, 'nome', e.target.value)}\n                placeholder=\"Nome do Treino\"\n              />\n              <input\n                style={{ ...inputStyle, flex: 1 }}\n                type=\"number\"\n                value={session.duracao}\n                onChange={(e) => updateTrainingSession(index, 'duracao', e.target.value)}\n                placeholder=\"Duração (min)\"\n              />\n              <input\n                style={{ ...inputStyle, flex: 1 }}\n                type=\"number\"\n                value={session.met}\n                onChange={(e) => updateTrainingSession(index, 'met', e.target.value)}\n                placeholder=\"MET\"\n              />\n            </div>\n            <div style={{ display: 'flex', marginBottom: '10px' }}>\n              {daysOfWeek.map(day => (\n                <button\n                  key={day}\n                  onClick={() => toggleDay(index, day)}\n                  style={dayButtonStyle(day === 'TODOS' ? session.allDays : session.dias[day]?.selected)}\n                >\n                  {day}\n                </button>\n              ))}\n            </div>\n            <div style={{ display: 'flex', gap: '5px' }}>\n              {daysOfWeek.map(day => (\n                <select\n                  key={day}\n                  value={day === 'TODOS' ? session.unifiedTime : session.dias[day]?.time}\n                  onChange={(e) => updateTime(index, day, e.target.value)}\n                  style={{\n                    ...selectStyle,\n                    flex: 1,\n                    opacity: day === 'TODOS' || session.dias[day]?.selected ? 1 : 0.5\n                  }}\n                >\n                  <option value=\"\">{day === 'TODOS' ? 'HH:MM' : session.unifiedTime || 'HH:MM'}</option>\n                  {timeOptions.map(time => (\n                    <option key={time} value={time}>{time}</option>\n                  ))}\n                </select>\n              ))}\n            </div>\n          </div>\n        ))}\n        <button onClick={addTrainingSession} style={addButtonStyle}>\n          Adicionar Treino\n        </button>\n      </div>\n\n      <button onClick={calculateResults} style={calculateButtonStyle}>\n        Calcular\n      </button>\n    </div>\n  );\n};\n\nexport default DietFlowCalculator;\n</antArtifact>\n\nI've updated the personal information section to display all inputs on a single line. The main changes are:\n\n1. Wrapped the personal information inputs in a flex container:\n   ```jsx\n   <div style={{ display: 'flex', gap: '10px', marginBottom: '10px' }}>\n     {/* Input fields here */}\n   </div>\n   ```\n\n2. Adjusted the style of each input to fit within the flex container:\n   ```jsx\n   style={{ ...inputStyle, flex: 1, marginBottom: 0 }}\n   ```\n\n3. Removed the individual `marginBottom` from each input and added it to the container instead.\n\nThese changes will make the personal information inputs appear in a single horizontal line, improving the layout and making better use of the available space. The rest of the component's functionality remains the same.",
        "content": [
          {
            "type": "text",
            "text": " Certainly! I'll modify the personal information inputs to be on a single line. Here's the updated React component with the personal information inputs arranged horizontally:\n\n<antThinking>This request involves modifying an existing React component, which is substantial and self-contained. It's appropriate to use an artifact for this update, reusing the previous identifier \"dashboard-component\".</antThinking>\n\n<antArtifact identifier=\"dashboard-component\" type=\"application/vnd.ant.react\" title=\"React Component: DietFlow Calculator\">\nimport React, { useState } from 'react';\n\nconst DietFlowCalculator = () => {\n  const [personalInfo, setPersonalInfo] = useState({\n    peso: '',\n    massaMagra: '',\n    ajusteCaloricoSemanal: '',\n    numeroRefeicoes: '4'\n  });\n\n  const [trainingSessions, setTrainingSessions] = useState([]);\n\n  const daysOfWeek = ['TODOS', 'SEG', 'TER', 'QUA', 'QUI', 'SEX', 'SAB', 'DOM'];\n  const timeOptions = [\n    '06:00', '07:00', '08:00', '09:00', '10:00', '11:00', '12:00',\n    '13:00', '14:00', '15:00', '16:00', '17:00', '18:00', '19:00',\n    '20:00', '21:00', '22:00'\n  ];\n\n  const handlePersonalInfoChange = (e) => {\n    setPersonalInfo({ ...personalInfo, [e.target.name]: e.target.value });\n  };\n\n  const addTrainingSession = () => {\n    setTrainingSessions([...trainingSessions, {\n      nome: '',\n      duracao: '',\n      met: '',\n      dias: Object.fromEntries(daysOfWeek.slice(1).map(day => [day, { selected: false, time: '' }])),\n      allDays: false,\n      unifiedTime: ''\n    }]);\n  };\n\n  const updateTrainingSession = (index, field, value) => {\n    const updatedSessions = [...trainingSessions];\n    updatedSessions[index][field] = value;\n    setTrainingSessions(updatedSessions);\n  };\n\n  const toggleDay = (sessionIndex, day) => {\n    const updatedSessions = [...trainingSessions];\n    const session = updatedSessions[sessionIndex];\n    if (day === 'TODOS') {\n      session.allDays = !session.allDays;\n      daysOfWeek.slice(1).forEach(d => {\n        session.dias[d].selected = session.allDays;\n        if (session.allDays && !session.dias[d].time) {\n          session.dias[d].time = session.unifiedTime;\n        }\n      });\n    } else {\n      session.dias[day].selected = !session.dias[day].selected;\n      if (session.dias[day].selected && !session.dias[day].time) {\n        session.dias[day].time = session.unifiedTime;\n      }\n    }\n    setTrainingSessions(updatedSessions);\n  };\n\n  const updateTime = (sessionIndex, day, time) => {\n    const updatedSessions = [...trainingSessions];\n    const session = updatedSessions[sessionIndex];\n    if (day === 'TODOS') {\n      session.unifiedTime = time;\n      daysOfWeek.slice(1).forEach(d => {\n        if (session.dias[d].selected || session.allDays) {\n          session.dias[d].time = time;\n        }\n      });\n    } else {\n      session.dias[day].time = time;\n      session.dias[day].selected = true;\n    }\n    setTrainingSessions(updatedSessions);\n  };\n\n  const calculateResults = () => {\n    console.log('Personal Info:', personalInfo);\n    console.log('Training Sessions:', trainingSessions);\n    alert('Cálculo realizado! Verifique o console para ver os dados.');\n  };\n\n  // Styles\n  const theme = {\n    backgroundColor: '#1e1e1e',\n    inputBg: '#2d2d2d',\n    buttonBg: '#3a3a3a',\n    textColor: '#ffffff',\n    borderColor: '#4a4a4a',\n    accentPurple: '#7c3aed',\n    accentBlue: '#3b82f6',\n    accentGreen: '#4ade80',\n    hoverColor: '#4a4a4a'\n  };\n\n  const containerStyle = {\n    backgroundColor: theme.backgroundColor,\n    color: theme.textColor,\n    padding: '20px',\n    borderRadius: '8px',\n    fontFamily: '\"Segoe UI\", Tahoma, Geneva, Verdana, sans-serif',\n    maxWidth: '800px',\n    margin: '0 auto'\n  };\n\n  const sectionStyle = {\n    backgroundColor: theme.inputBg,\n    padding: '20px',\n    borderRadius: '8px',\n    marginBottom: '20px'\n  };\n\n  const inputStyle = {\n    backgroundColor: theme.inputBg,\n    color: theme.textColor,\n    border: `1px solid ${theme.borderColor}`,\n    borderRadius: '4px',\n    padding: '8px',\n    fontSize: '14px',\n    width: '100%',\n    boxSizing: 'border-box',\n    marginBottom: '10px'\n  };\n\n  const buttonStyle = {\n    backgroundColor: theme.buttonBg,\n    color: theme.textColor,\n    border: 'none',\n    borderRadius: '4px',\n    padding: '8px 12px',\n    fontSize: '14px',\n    cursor: 'pointer',\n    transition: 'background-color 0.3s',\n    fontWeight: 'bold'\n  };\n\n  const dayButtonStyle = (selected) => ({\n    ...buttonStyle,\n    backgroundColor: selected ? theme.accentPurple : theme.buttonBg,\n    flex: 1,\n    margin: '0 2px'\n  });\n\n  const addButtonStyle = {\n    ...buttonStyle,\n    backgroundColor: theme.accentGreen,\n    padding: '10px 15px',\n    fontSize: '16px',\n    marginTop: '20px',\n    width: '100%',\n    borderRadius: '8px'\n  };\n\n  const calculateButtonStyle = {\n    ...addButtonStyle,\n    backgroundColor: theme.accentBlue,\n    marginTop: '30px'\n  };\n\n  const selectStyle = {\n    ...inputStyle,\n    backgroundColor: theme.buttonBg,\n    cursor: 'pointer'\n  };\n\n  const headerStyle = {\n    color: theme.accentBlue,\n    fontSize: '32px',\n    fontWeight: 'bold',\n    marginBottom: '20px',\n    textAlign: 'center'\n  };\n\n  return (\n    <div style={containerStyle}>\n      <h1 style={headerStyle}>DietFlow Calculator</h1>\n      \n      <div style={sectionStyle}>\n        <h2 style={{...headerStyle, fontSize: '24px'}}>Informações Pessoais</h2>\n        <div style={{ display: 'flex', gap: '10px', marginBottom: '10px' }}>\n          <input\n            style={{ ...inputStyle, flex: 1, marginBottom: 0 }}\n            type=\"number\"\n            name=\"peso\"\n            value={personalInfo.peso}\n            onChange={handlePersonalInfoChange}\n            placeholder=\"Peso (kg)\"\n          />\n          <input\n            style={{ ...inputStyle, flex: 1, marginBottom: 0 }}\n            type=\"number\"\n            name=\"massaMagra\"\n            value={personalInfo.massaMagra}\n            onChange={handlePersonalInfoChange}\n            placeholder=\"Massa Magra (kg)\"\n          />\n          <input\n            style={{ ...inputStyle, flex: 1, marginBottom: 0 }}\n            type=\"number\"\n            name=\"ajusteCaloricoSemanal\"\n            value={personalInfo.ajusteCaloricoSemanal}\n            onChange={handlePersonalInfoChange}\n            placeholder=\"Ajuste Calórico Semanal\"\n          />\n          <select\n            style={{ ...selectStyle, flex: 1, marginBottom: 0 }}\n            name=\"numeroRefeicoes\"\n            value={personalInfo.numeroRefeicoes}\n            onChange={handlePersonalInfoChange}\n          >\n            <option value=\"4\">4 Refeições</option>\n            <option value=\"5\">5 Refeições</option>\n            <option value=\"6\">6 Refeições</option>\n          </select>\n        </div>\n      </div>\n\n      <div style={sectionStyle}>\n        <h2 style={{...headerStyle, fontSize: '24px'}}>Sessões de Treino</h2>\n        {trainingSessions.map((session, index) => (\n          <div key={index} style={{ marginBottom: '20px', padding: '15px', backgroundColor: theme.backgroundColor, borderRadius: '8px' }}>\n            <div style={{ display: 'flex', gap: '10px', marginBottom: '15px' }}>\n              <input\n                style={{ ...inputStyle, flex: 2 }}\n                value={session.nome}\n                onChange={(e) => updateTrainingSession(index, 'nome', e.target.value)}\n                placeholder=\"Nome do Treino\"\n              />\n              <input\n                style={{ ...inputStyle, flex: 1 }}\n                type=\"number\"\n                value={session.duracao}\n                onChange={(e) => updateTrainingSession(index, 'duracao', e.target.value)}\n                placeholder=\"Duração (min)\"\n              />\n              <input\n                style={{ ...inputStyle, flex: 1 }}\n                type=\"number\"\n                value={session.met}\n                onChange={(e) => updateTrainingSession(index, 'met', e.target.value)}\n                placeholder=\"MET\"\n              />\n            </div>\n            <div style={{ display: 'flex', marginBottom: '10px' }}>\n              {daysOfWeek.map(day => (\n                <button\n                  key={day}\n                  onClick={() => toggleDay(index, day)}\n                  style={dayButtonStyle(day === 'TODOS' ? session.allDays : session.dias[day]?.selected)}\n                >\n                  {day}\n                </button>\n              ))}\n            </div>\n            <div style={{ display: 'flex', gap: '5px' }}>\n              {daysOfWeek.map(day => (\n                <select\n                  key={day}\n                  value={day === 'TODOS' ? session.unifiedTime : session.dias[day]?.time}\n                  onChange={(e) => updateTime(index, day, e.target.value)}\n                  style={{\n                    ...selectStyle,\n                    flex: 1,\n                    opacity: day === 'TODOS' || session.dias[day]?.selected ? 1 : 0.5\n                  }}\n                >\n                  <option value=\"\">{day === 'TODOS' ? 'HH:MM' : session.unifiedTime || 'HH:MM'}</option>\n                  {timeOptions.map(time => (\n                    <option key={time} value={time}>{time}</option>\n                  ))}\n                </select>\n              ))}\n            </div>\n          </div>\n        ))}\n        <button onClick={addTrainingSession} style={addButtonStyle}>\n          Adicionar Treino\n        </button>\n      </div>\n\n      <button onClick={calculateResults} style={calculateButtonStyle}>\n        Calcular\n      </button>\n    </div>\n  );\n};\n\nexport default DietFlowCalculator;\n</antArtifact>\n\nI've updated the personal information section to display all inputs on a single line. The main changes are:\n\n1. Wrapped the personal information inputs in a flex container:\n   ```jsx\n   <div style={{ display: 'flex', gap: '10px', marginBottom: '10px' }}>\n     {/* Input fields here */}\n   </div>\n   ```\n\n2. Adjusted the style of each input to fit within the flex container:\n   ```jsx\n   style={{ ...inputStyle, flex: 1, marginBottom: 0 }}\n   ```\n\n3. Removed the individual `marginBottom` from each input and added it to the container instead.\n\nThese changes will make the personal information inputs appear in a single horizontal line, improving the layout and making better use of the available space. The rest of the component's functionality remains the same."
          }
        ],
        "sender": "assistant",
        "created_at": "2024-08-07T07:50:28.933806Z",
        "updated_at": "2024-08-07T07:50:28.933806Z",
        "attachments": [],
        "files": []
      }
    ]
  }
]